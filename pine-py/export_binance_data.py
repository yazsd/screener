# -*- coding: utf-8 -*-
"""export-binance-data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lQ4fk1Ar1PJ3DcPgcumFZ8ZVn22BvhhC
"""

# !pip install python-binance && pip3 install pickle5

# # Mount Google Drive
# from google.colab import drive
# from google.colab import files
# drive.mount('/content/drive/')

from binance.client import Client
import pickle
# import pickle5 as pickle
from datetime import datetime
import pandas as pd


four_hrs_ms = 14400000
# start_ts = 1609605000000
start_ts = 1546286400000
end_ts = 1648353600000

def read_pickle_file(fn):
    # with open(path_to_protocol5, "rb") as fh:
    with open(fn, 'rb') as handle:
        val = pickle.load(handle)
    print('read_pickle_file')
    return val


def get_client():
    # fn = '/content/drive/My Drive/Projects/TRDR/Bkey/binance-key.pickle'
    fn = 'C:/Users/HENOK/Documents/Bkey/binance-key.pickle'
    val = read_pickle_file(fn)
    api_key=val['binance_api_key']
    api_secret=val['binance_api_secret']
    print('get_client')
    return Client(api_key, api_secret)


def get_historical_data(client, coin_pair, interval, start_ts, end_ts):
    # from_date = datetime.utcfromtimestamp(from_date_ts).strftime('%d-%m-%Y %H:%M:%S')
    # to_date = datetime.utcfromtimestamp(to_date_ts).strftime('%d-%m-%Y %H:%M:%S')
    # valid intervals - 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M
    # 1h = KLINE_INTERVAL_1HOUR 
    # 30m = KLINE_INTERVAL_30MINUTE
    # returns OHLCV
    print('get_historical_data')
    return client.futures_historical_klines_generator(coin_pair, interval, start_ts, end_ts)

def prep60_data(tmf30_local_time, tmf60_local_time, data60):
    r = []
    append_val = 0.0
    for i in tmf30_local_time:
        if i in tmf60_local_time:
            idx = tmf60_local_time.index(i)
            append_val = data60[idx]
        r.append(append_val)
    print('prep60_data')
    return r

client = get_client()

d30 = list(get_historical_data(client, 'BTCUSDT', '30m', start_ts, end_ts))
d60 = list(get_historical_data(client, 'BTCUSDT', '1h', start_ts, end_ts))

my_df30 = pd.DataFrame()
my_df60 = pd.DataFrame()
comb_df = pd.DataFrame()

utc_ts30 = [i[0] for i in d30]
tmf30_local_time = [datetime.utcfromtimestamp((i[0]/1000)+four_hrs_ms/1000).strftime('%Y-%m-%dT%H:%M:00+04:00') for i in d30]
open30 = [float(i[1]) for i in d30]
high30 = [float(i[2]) for i in d30]
low30 = [float(i[3]) for i in d30]
close30 = [float(i[4]) for i in d30]


my_df30['utc_ts30'] = utc_ts30
my_df30['tmf30_local_time'] = tmf30_local_time
my_df30['open30'] = open30
my_df30['high30'] = high30
my_df30['low30'] = low30
my_df30['close30'] = close30


utc_ts60 = [i[0] for i in d60]
tmf60_local_time = [datetime.utcfromtimestamp((i[0]/1000)+four_hrs_ms/1000).strftime('%Y-%m-%dT%H:%M:00+04:00') for i in d60]
open60 = [float(i[1]) for i in d60]
high60 = [float(i[2]) for i in d60]
low60 = [float(i[3]) for i in d60]
close60 = [float(i[4]) for i in d60]

nw_open60 = prep60_data(tmf30_local_time, tmf60_local_time, open60)
nw_high60 = prep60_data(tmf30_local_time, tmf60_local_time, high60)
nw_low60 = prep60_data(tmf30_local_time, tmf60_local_time, low60)
nw_close60 = prep60_data(tmf30_local_time, tmf60_local_time, close60)
new_tf60 = prep60_data(tmf30_local_time, tmf60_local_time, utc_ts60)

comb_df['time'] = tmf30_local_time
comb_df['open'] = open30
comb_df['high'] = high30
comb_df['low'] = low30
comb_df['close'] = close30
comb_df['close_60m'] = nw_close60
comb_df['open_60m'] = nw_open60
comb_df['high60'] = nw_high60
comb_df['low60'] = nw_low60
comb_df['time_tf'] = new_tf60

fn = 'C:/Users/HENOK/Downloads/BINANCE_BTCUSDTPERP, 30.csv'
print('BINANCE_BTCUSDTPERP, 30.csv exported!')
comb_df.to_csv(fn, index=False)
# files.download(fn)